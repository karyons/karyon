var searchIndex = JSON.parse('{\
"karyon_core":{"doc":"","t":"GGMMAAAAMMMMAADNNDDENNDEAMAMAMMMMAFMMAMAFMDMLLLLMLLMLMLLLLDDDLLLLLLLMLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLMDLLLMLLLLLLLLLLMLENNDLLLLLLLLMMLLLLFLLLLLLLLLLNNDDELLLLLLLLMMLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLFNNNEEEDANNNDDEIEEIDKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLKLLKLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLNNNNNNENNNGNNLLLLLLLLLLLLLLLLLLLGDDGDIIIGQGMMMLLLLLLLLLMLLLMLMLLLLLKMLLLMLLLMMMMLMLLLLKLMLLLLLLLLLMKLLLLGDDGMLLLLLLMLLLLLMMMLMMLLLLLLLLLLLAFAFFFAFFFFFFFF","n":["Executor","GlobalExecutor","alloc","alloc","async_util","crypto","error","event","phantom","phantom","ptr","ptr","pubsub","util","Backoff","Cancelled","Completed","CondVar","CondWait","Either","Left","Right","TaskGroup","TaskResult","backoff","base_delay","condvar","condvar","condwait","executor","inner","max_delay","retries","select","select","stop","stop_signal","task_group","tasks","timeout","timeout","w","Backoff","base_delay","borrow","borrow_mut","from","into","max_delay","new","reset","retries","sleep","stop","try_from","try_into","type_id","vzip","CondVar","CondVarAwait","Wakers","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","broadcast","condvar","default","delete","drop","from","from","from","guard","id","inner","into","into","into","into_future","new","new","new","poll","put","signal","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","wait","wake","wakers","CondWait","borrow","borrow_mut","broadcast","condvar","default","from","into","new","reset","signal","try_from","try_into","type_id","vzip","w","wait","Either","Left","Right","Select","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","future1","future2","into","into","into_future","poll","select","try_from","try_from","try_into","try_into","type_id","type_id","value_as_any","value_as_any","vzip","vzip","Cancelled","Completed","TaskGroup","TaskHandler","TaskResult","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cancel","cancel","cancel_flag","executor","fmt","fmt","from","from","from","into","into","into","is_empty","len","new","new","spawn","stop_signal","task","tasks","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_as_any","vzip","vzip","vzip","timeout","Ed25519","Ed25519","Ed25519","KeyPair","KeyPairType","PublicKey","SecretKey","key_pair","Ed25519","Ed25519","Ed25519","Ed25519KeyPair","Ed25519PublicKey","KeyPair","KeyPairExt","KeyPairType","PublicKey","PublicKeyExt","SecretKey","as_bytes","as_bytes","as_bytes","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","from","from","from","from","from_bytes","from_bytes","generate","generate","into","into","into","into","into","into","public","public","public","secret","secret","secret","sign","sign","sign","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","value_as_any","value_as_any","verify","verify","verify","vzip","vzip","vzip","vzip","vzip","vzip","BincodeDecode","BincodeEncode","ChannelRecv","ChannelSend","Ed25519","Err","Error","IO","Ok","PathNotFound","Result","Timeout","TryInto","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","value_as_any","vzip","ArcEventSys","Event","EventListener","EventListenerID","EventSys","EventValue","EventValueAny","EventValueTopic","Listeners","Topic","WeakEventSys","alloc","alloc","base","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cancel","clone","clone_into","created_at","emit","emit_by_topic","event_id","event_id","event_sys","event_sys","fmt","fmt","from","from","from","id","id","into","into","into","listeners","new","new","new","phantom","phantom","ptr","ptr","recv","recv_chan","register","remove","to_owned","to_string","topic","topic","topic","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value","value_as_any","value_as_any","vzip","vzip","vzip","ArcPublisher","Publisher","Subscription","SubscriptionID","alloc","borrow","borrow","borrow_mut","borrow_mut","from","from","id","into","into","new","new","notify","phantom","ptr","publisher","recv","recv_chan","subs","subscribe","try_from","try_from","try_into","try_into","type_id","type_id","unsubscribe","unsubscribe","vzip","vzip","decode","decode","encode","encode","encode_into_slice","home_dir","path","random_16","random_32","tilde_expand","decode","encode","encode_into_slice","home_dir","tilde_expand"],"q":[[0,"karyon_core"],[14,"karyon_core::async_util"],[42,"karyon_core::async_util::backoff"],[58,"karyon_core::async_util::condvar"],[103,"karyon_core::async_util::condwait"],[120,"karyon_core::async_util::select"],[149,"karyon_core::async_util::task_group"],[194,"karyon_core::async_util::timeout"],[195,"karyon_core::crypto"],[203,"karyon_core::crypto::key_pair"],[291,"karyon_core::error"],[323,"karyon_core::event"],[395,"karyon_core::pubsub"],[429,"karyon_core::util"],[439,"karyon_core::util::decode"],[440,"karyon_core::util::encode"],[442,"karyon_core::util::path"],[444,"core::future::future"],[445,"core::time"],[446,"core::result"],[447,"core::any"],[448,"core::task::wake"],[449,"core::option"],[450,"async_lock::mutex"],[451,"core::pin"],[452,"core::task::wake"],[453,"core::fmt"],[454,"core::fmt"],[455,"core::marker"],[456,"core::ops::function"],[457,"alloc::string"],[458,"alloc::vec"],[459,"signature::error"],[460,"bincode::error"],[461,"async_channel"],[462,"async_channel"],[463,"core::error"],[464,"core::hash"],[465,"core::cmp"],[466,"core::clone"],[467,"async_channel"],[468,"bincode::enc"],[469,"std::path"]],"d":["A pointer to an Executor","A Global Executor","","","A module containing async utilities that work with the <code>smol</code>…","Collects common cryptographic tools","Represents karyon’s Core Error.","<code>event::EventSys</code> implementation.","","","","","A simple publish-subscribe system <code>Read More</code>","A set of helper tools and functions.","Exponential backoff …","","","CondVar is an async version of …","CondWait is a wrapper struct for CondVar with a Mutex …","The return value from the <code>select</code> function, indicating …","","","TaskGroup is a group of spawned tasks.","The result of a spawned task.","","The base delay in milliseconds for the initial retry.","","The CondVar","","","","The max delay in milliseconds allowed for a retry.","Atomic counter","","Returns the result of the future that completes first, …","Stop flag","","","","","Waits for a future to complete or times out if it exceeds …","Boolean flag","Exponential backoff …","The base delay in milliseconds for the initial retry.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The max delay in milliseconds allowed for a retry.","Creates a new Backoff.","Reset the retry counter to 0.","Atomic counter","Sleep based on the current retry count and delay values. …","Stop flag","","","","","CondVar is an async version of …","","Wakers is a helper struct to store the task wakers","","","","","","","Wakes up all blocked tasks waiting on this condvar.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new CondVar","","","","","Wakes up one blocked task waiting on this condvar.","","","","","","","","","","","","","Blocks the current task until this condition variable …","","","CondWait is a wrapper struct for CondVar with a Mutex …","","","Signal all waiting tasks.","The CondVar","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new CondWait.","Reset the boolean flag value to false.","Signal a waiting task.","","","","","Boolean flag","Waits for a signal or broadcast.","The return value from the <code>select</code> function, indicating …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Returns the result of the future that completes first, …","","","","","","","","","","","","","TaskGroup is a group of spawned tasks.","TaskHandler","The result of a spawned task.","","","","","","","Cancels all tasks in the group.","Cancels the task.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Checks if the task group is empty.","Get the number of the tasks in the group.","Creates a new task group","Creates a new task handle","Spawns a new task and calls the callback after it has …","","","","","","","","","","","","","","","","","","Waits for a future to complete or times out if it exceeds …","","","","","key cryptography type","","A Secret key","","","","","","","","An extension trait, adding essential methods to all <code>KeyPair</code>…","key cryptography type","","An extension trait, adding essential methods to all …","A Secret key","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Generate a new random keypair.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the public key of this keypair.","Get the public key of this keypair.","","Get the secret key of this keypair.","Get the secret key of this keypair.","","Sign a message using the private key.","Sign a message using the private key.","","","","","","","","","","","","","","","","","","","","","","","","Verify a signature on a message with this public key.","Verify a signature on a message with this public key.","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","","","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","An event within the <code>EventSys</code>.","EventListener listens for and receives events from the …","","EventSys supports event emission to registered listeners …","","","","","","","","","","","","","","","","Cancels the listener and removes it from the <code>EventSys</code>.","","","The time at which the event was created.","Emits an event to the listeners.","Emits an event to the listeners.","Returns the event id for this event listener.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new <code>EventSys</code>","Create a new event listener.","Creates a new Event.","","","","","Receive the next event.","","Registers a new event listener for the given topic.","Removes the event listener attached to the given topic.","","","","Returns the topic for this event listener.","","","","","","","","","","","The value of the Event.","","","","","","","A simple publish-subscribe system.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Publisher","Creates a new Subscription","Notify all subscribers","","","","Receive a message from the Publisher","","","Subscribe and return a Subscription","","","","","","","Unsubscribe from the Publisher","Unsubscribe from the Publisher","","","","Decodes a given type <code>T</code> from the given slice. returns the …","","Encode the given type <code>T</code> into a <code>Vec&lt;u8&gt;</code>.","Encode the given type <code>T</code> into the given slice..","Returns the user’s home directory as a <code>PathBuf</code>.","","Generates and returns a random u16 using <code>rand::rngs::OsRng</code>.","Generates and returns a random u32 using <code>rand::rngs::OsRng</code>.","Expands a tilde (~) in a path and returns the expanded …","Decodes a given type <code>T</code> from the given slice. returns the …","Encode the given type <code>T</code> into a <code>Vec&lt;u8&gt;</code>.","Encode the given type <code>T</code> into the given slice..","Returns the user’s home directory as a <code>PathBuf</code>.","Expands a tilde (~) in a path and returns the expanded …"],"i":[0,0,31,75,0,0,0,0,31,75,31,75,0,0,0,29,29,0,0,0,25,25,0,0,0,6,0,21,0,27,10,6,6,0,0,6,27,0,27,0,0,21,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,10,15,11,10,15,11,10,15,10,11,15,10,15,11,15,15,10,10,15,11,15,10,15,11,15,11,10,10,15,11,10,15,11,10,15,11,10,15,11,10,11,11,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,25,25,0,1,25,1,25,1,25,1,25,1,1,1,25,1,1,0,1,25,1,25,1,25,1,25,1,25,29,29,0,0,0,27,28,29,27,28,29,27,28,28,27,29,29,27,28,29,27,28,29,27,27,27,28,27,27,28,27,29,27,28,29,27,28,29,27,28,29,29,27,28,29,0,42,40,38,0,0,0,0,0,42,40,38,0,0,0,0,0,0,0,0,76,38,39,42,43,40,41,38,39,42,43,40,41,38,39,40,41,40,41,38,39,42,43,40,41,38,39,38,39,40,41,42,43,40,41,38,39,77,40,41,77,40,41,77,40,41,40,41,42,43,40,41,38,39,42,43,40,41,38,39,42,43,40,41,38,39,38,39,76,38,39,42,43,40,41,38,39,45,45,45,45,45,4,0,45,4,45,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,0,0,0,0,61,0,62,65,78,60,53,59,60,53,59,53,59,59,59,60,60,53,53,53,53,59,59,60,53,59,58,53,60,53,59,60,60,53,59,62,53,62,65,53,53,60,60,59,59,61,53,53,60,53,59,60,53,59,60,53,59,59,57,59,60,53,59,0,0,0,0,67,70,69,70,69,70,69,69,70,69,70,69,70,67,67,69,69,69,70,70,70,69,70,69,70,69,70,69,70,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2],[[1,[-1,-2]]],2,2],0,0,0,0,0,[[3,-1],[[4,[-2]]],2,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],0,[[5,5],6],[6,7],0,[6,5],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,7],0,[[],10],[[11,12],[[14,[[14,[13]]]]]],[[[15,[-1]]],7,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[],10],[[10,[16,[-1]]],[[15,[-1]]],[]],[[],11],[[[17,[[15,[-1]]]],18],19,[]],[[11,[14,[13]]],12],[10,7],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[10,[16,[-1]]],[[16,[-1]]],[]],[[11,20],7],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[21,7],0,[[],21],[-1,-1,[]],[-1,-2,[],[]],[[],21],[21,7],[21,7],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,-2,[],[]],0,[21,7],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2]],22],23,24,24],[[[25,[-1,-2]],22],23,24,24],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[],[]],[[[17,[[1,[-1,-2]]]],18],19,2,2],[[-1,-2],[[1,[-1,-2]]],2,2],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,7],[28,7],0,0,[[[29,[-1]],22],23,24],[[[29,[-1]],22],23,24],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[27,20],[27,30],[31,27],[[31,-1,-2,[32,[21]]],28,[2,33],[34,33]],[[27,-1,-2],7,[2,33],[34,33]],0,0,0,[-1,35,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[3,-1],[[4,[-2]]],2,[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[37,[36]]],[]],[38,[[37,[36]]]],[39,[[37,[36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[40,40],[41,41],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],[[38,22],23],[[39,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[42,[37,[36]]],[[4,[38]]]],[[[37,[36]]],[[4,[39]]]],[42,40],[[],41],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,38,[]],[40,38],[41,38],[-1,43,[]],[40,43],[41,43],[[-1,[37,[36]]],[[44,[36]]],[]],[[40,[37,[36]]],[[44,[36]]]],[[41,[37,[36]]],[[44,[36]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],[-1,26,[]],[-1,26,[]],[[-1,[37,[36]],[37,[36]]],[[4,[7]]],[]],[[38,[37,[36]],[37,[36]]],[[4,[7]]]],[[39,[37,[36]],[37,[36]]],[[4,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[45,22],23],[[45,22],23],[-1,-1,[]],[46,45],[47,45],[48,45],[[[49,[-1]]],45,[]],[50,45],[51,45],[-1,-2,[],[]],[45,[[14,[52]]]],[-1,35,[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,26,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[53,[-1,-2]]],7,[54,55,56,24],[57,56,58]],[59,59],[[-1,-2],7,[],[]],0,[[[60,[-1]],-2],7,[54,55,24,56],[61,56]],[[[60,[-1]],-1,-2],7,[54,55,24,56],[57,58,56]],[[[53,[-1,-2]]],35,[54,55,56,24],[57,56,58]],0,[[[53,[-1,-2]]],[[62,[-1]]],[54,55,56,24],[57,56,58]],0,[[59,22],23],[[59,22],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[],63],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],[[62,[-1]]],[54,55,24,56]],[[64,[65,[-1]],[66,[59]],63,-1],[[53,[-1,-2]]],[54,55,56,24],[57,56,58]],[[[32,[57]]],59],0,0,0,0,[[[53,[-1,-2]]],[[4,[-2]]],[54,55,56,24],[57,56,58]],0,[[[32,[[60,[-1]]]],-1],[[53,[-1,-2]]],[54,55,24,56],[57,58,56]],[[[60,[-1]],-1,63,64],7,[54,55,24,56]],[-1,-2,[],[]],[-1,35,[]],[[]],[[[53,[-1,-2]]],-1,[54,55,56,24],[57,56,58]],0,[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[-1,9,[]],0,[-1,26,[]],[-1,26,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[],[[67,[-1]]],56],[[68,[67,[-1]],[66,[-1]]],[[69,[-1]]],56],[[[32,[[70,[-1]]]],-1],7,56],0,0,0,[[[69,[-1]]],[[4,[-1]]],56],0,0,[[[32,[[70,[-1]]]]],[[69,[-1]]],56],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,[[8,[-2]]],[],[]],[-1,9,[]],[-1,9,[]],[[[32,[[70,[-1]]]],68],7,56],[[[69,[-1]]],7,56],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[37,[36]]],[[4,[[7,[-1,30]]]]],71],0,[-1,[[4,[[44,[36]]]]],72],[[-1,[37,[36]]],[[4,[7]]],72],[[],[[4,[73]]]],0,[[],12],[[],74],[63,[[4,[73]]]],[[[37,[36]]],[[4,[[7,[-1,30]]]]],71],[-1,[[4,[[44,[36]]]]],72],[[-1,[37,[36]]],[[4,[7]]],72],[[],[[4,[73]]]],[63,[[4,[73]]]]],"c":[],"p":[[3,"Select",120],[8,"Future",444],[3,"Duration",445],[6,"Result",291],[15,"u64"],[3,"Backoff",42],[15,"tuple"],[4,"Result",446],[3,"TypeId",447],[3,"CondVar",58],[3,"Wakers",58],[15,"u16"],[3,"Waker",448],[4,"Option",449],[3,"CondVarAwait",58],[3,"MutexGuard",450],[3,"Pin",451],[3,"Context",448],[4,"Poll",452],[15,"bool"],[3,"CondWait",103],[3,"Formatter",453],[6,"Result",453],[8,"Debug",453],[4,"Either",120],[8,"Any",447],[3,"TaskGroup",149],[3,"TaskHandler",149],[4,"TaskResult",149],[15,"usize"],[6,"Executor",0],[3,"Arc",454],[8,"Send",455],[8,"FnOnce",456],[3,"String",457],[15,"u8"],[15,"slice"],[4,"PublicKey",203],[3,"Ed25519PublicKey",203],[4,"KeyPair",203],[3,"Ed25519KeyPair",203],[4,"KeyPairType",203],[3,"SecretKey",203],[3,"Vec",458],[4,"Error",291],[3,"Error",459],[4,"EncodeError",460],[3,"RecvError",461],[3,"SendError",461],[4,"DecodeError",460],[3,"Error",462],[8,"Error",463],[3,"EventListener",323],[8,"Hash",464],[8,"Eq",465],[8,"Clone",466],[8,"EventValueAny",323],[8,"EventValue",323],[3,"Event",323],[3,"EventSys",323],[8,"EventValueTopic",323],[6,"ArcEventSys",323],[15,"str"],[6,"EventListenerID",323],[6,"WeakEventSys",323],[3,"Receiver",461],[6,"ArcPublisher",395],[6,"SubscriptionID",395],[3,"Subscription",395],[3,"Publisher",395],[8,"Decode",467],[8,"Encode",468],[3,"PathBuf",469],[15,"u32"],[6,"GlobalExecutor",0],[8,"PublicKeyExt",203],[8,"KeyPairExt",203],[6,"Listeners",323]]},\
"karyon_jsonrpc":{"doc":"A fast and lightweight async implementation of JSON-RPC 2.0…","t":"NDDDENNNNRENNNGNIDDNNNNLLLALLAMMMMMLLALLLLKLLMMAKLLLLLOAAMMMLLLLLLLDDLLLLLMMLLLLLLMLLLLLLLLDDRRLLLLLLMMLMLLLLMLLLLLLLLLLLLLNNENNNNNNNNNGLLLLLLLLLLLLLLLLLDRRRRDRDDLLLLLLLLMMLLLLMLLLLLLLLLLLLMMLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLMMLLLLLLLMLLLMLLMLLLLLLLLGGIKK","n":["CallError","Client","ClientConfig","CodecConfig","Endpoint","IO","InvalidMsg","InvalidParams","InvalidRequest","JSONRPC_VERSION","JsonRPCError","KaryonCore","KaryonNet","ParseJSON","RPCMethod","RPCMethodError","RPCService","Server","ServerConfig","Tcp","Tls","Udp","Unix","addr","borrow","borrow_mut","client","clone","clone_into","codec","codec","codec_config","config","config","default_buffer_size","eq","equivalent","error","fmt","fmt","from","from_str","get_method","hash","into","listener","max_allowed_buffer_size","message","name","new_tcp_addr","new_tls_addr","new_udp_addr","new_unix_addr","port","register_service","server","service","services","task_group","timeout","to_owned","to_string","try_from","try_into","type_id","value_as_any","vzip","Client","ClientConfig","borrow","borrow","borrow_mut","borrow_mut","call","codec","config","default","from","from","into","into","new","timeout","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Codec","CodecConfig","DEFAULT_BUFFER_SIZE","DEFAULT_MAX_ALLOWED_BUFFER_SIZE","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","config","conn","default","default_buffer_size","from","from","into","into","max_allowed_buffer_size","new","read_until","read_until_timeout","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write_all","CallError","Err","Error","IO","InvalidMsg","InvalidParams","InvalidRequest","KaryonCore","KaryonNet","Ok","ParseJSON","RPCMethodError","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","value_as_any","vzip","Error","INTERNAL_ERROR_CODE","INVALID_PARAMS_ERROR_CODE","INVALID_REQUEST_ERROR_CODE","METHOD_NOT_FOUND_ERROR_CODE","Notification","PARSE_ERROR_CODE","Request","Response","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","code","data","deserialize","deserialize","deserialize","deserialize","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","id","id","into","into","into","into","jsonrpc","jsonrpc","jsonrpc","message","method","method","params","params","result","serialize","serialize","serialize","serialize","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","value_as_any","value_as_any","value_as_any","value_as_any","vzip","vzip","vzip","vzip","Server","ServerConfig","attach_service","borrow","borrow","borrow_mut","borrow_mut","codec_config","config","default","from","from","handle_conn","handle_request","into","into","listener","local_endpoint","new","pack_err_res","services","shutdown","start","task_group","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","RPCMethod","RPCMethodOutput","RPCService","get_method","name"],"q":[[0,"karyon_jsonrpc"],[67,"karyon_jsonrpc::client"],[91,"karyon_jsonrpc::codec"],[123,"karyon_jsonrpc::error"],[153,"karyon_jsonrpc::message"],[232,"karyon_jsonrpc::server"],[264,"karyon_jsonrpc::service"],[269,"karyon_net::endpoint"],[270,"karyon_net::error"],[271,"core::result"],[272,"core::fmt"],[273,"core::fmt"],[274,"core::hash"],[275,"alloc::string"],[276,"core::net::socket_addr"],[277,"std::os::unix::net::addr"],[278,"core::any"],[279,"core::any"],[280,"serde::de"],[281,"karyon_net::connection"],[282,"karyon_net::connection"],[283,"core::fmt"],[284,"std::io::error"],[285,"karyon_core::error"],[286,"core::error"],[287,"serde::de"],[288,"karyon_core"],[289,"karyon_net::listener"],[290,"serde_json::value"]],"d":["","Represents an RPC client","Represents client config","Represents Codec config","Endpoint defines generic network endpoints for karyon.","","","","","","Represents karyon’s jsonrpc Error.","","","","Represents the RPC method","","Defines the interface for an RPC service.","Represents an RPC server","RPC server config","","","","","Returns the <code>Addr</code> of the endpoint.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","The maximum allowed buffer size to receive a message. If …","","","Creates a new TCP endpoint from a <code>SocketAddr</code>.","Creates a new TLS endpoint from a <code>SocketAddr</code>.","Creates a new UDP endpoint from a <code>SocketAddr</code>.","Creates a new Unix endpoint from a <code>UnixSocketAddress</code>.","Returns the <code>Port</code> of the endpoint.","Implements the <code>RPCService</code> trait for a provided type.","","","","","","","","","","","","","Represents an RPC client","Represents client config","","","","","Calls the named method, waits for the response, and …","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new RPC client by passing a Tcp, Unix, or Tls …","","","","","","","","","","","Represents Codec config","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The maximum allowed buffer size to receive a message. If …","Creates a new Codec","Read all bytes into <code>buffer</code> until the <code>0x0A</code> byte or EOF is …","","","","","","","","","","","Writes an entire buffer into the given connection.","","Contains the error value","Represents karyon’s jsonrpc Error.","","","","","","","Contains the success value","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","Internal error: Internal JSON-RPC error.","Invalid params: Invalid method parameter(s).","Invalid request: The JSON sent is not a valid Request …","Method not found: The method does not exist / is not …","","Parse error: Invalid JSON was received by the server.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents an RPC server","RPC server config","Attach a new service to the RPC server","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Handles a new connection","Handles a request","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns the local endpoint.","Creates a new RPC server by passing a listener. It …","","","Shuts down the RPC server","Starts the RPC server","","","","","","","","","","Represents the RPC method","","Defines the interface for an RPC service.","",""],"i":[20,0,0,0,0,20,20,20,20,0,0,20,20,20,0,20,0,0,0,1,1,1,1,1,1,1,0,1,1,0,19,46,19,44,25,1,1,0,1,1,1,1,45,1,1,44,25,0,45,1,1,1,1,1,0,0,0,44,44,23,1,1,1,1,1,1,1,0,0,19,23,19,23,19,19,19,23,19,23,19,23,19,23,19,23,19,23,19,23,19,23,0,0,0,0,27,25,27,25,25,25,27,27,25,25,27,25,27,25,25,27,27,27,25,27,25,27,25,27,25,27,25,27,20,52,0,20,20,20,20,20,20,52,20,20,0,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,0,0,0,0,0,0,0,0,0,38,40,41,42,38,40,41,42,41,41,38,40,41,42,40,38,38,40,40,41,41,42,42,38,40,41,42,38,40,38,40,41,42,38,40,42,41,38,42,38,42,40,38,40,41,42,38,40,41,42,38,40,41,42,38,40,41,42,38,40,41,42,38,40,41,42,38,40,41,42,0,0,44,44,46,44,46,46,44,46,44,46,44,44,44,46,44,44,44,44,44,44,44,44,44,46,44,46,44,46,44,46,0,0,0,45,45],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[4,[2,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,1],[[-1,-2],5,[],[]],0,0,0,0,0,0,[[1,1],6],[[-1,-2],6,[],[]],0,[[1,7],[[4,[5,8]]]],[[1,7],[[4,[5,8]]]],[-1,-1,[]],[9,[[4,[1]]]],[[-1,9],[[11,[10]]],[]],[[1,-1],5,12],[-1,-2,[],[]],0,0,0,[-1,13,[]],[14,1],[14,1],[14,1],[15,1],[1,[[4,[16,3]]]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,13,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,18,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[19,9,-1],[[4,[-2,20]]],[21,22],22],0,0,[[],23],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,23],19,24],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[25,25],[[-1,-2],5,[],[]],0,0,[[],25],0,[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[26,25],27],[[27,[29,[28]]],[[4,[30,20]]]],[[27,[29,[28]],31],[[4,[30,20]]]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[27,[32,[28]]],[[4,[5,20]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[20,7],33],[[20,7],33],[-1,-1,[]],[34,20],[3,20],[35,20],[36,20],[-1,-2,[],[]],[20,[[11,[37]]]],[-1,13,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,18,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,[[4,[38]]],39],[-1,[[4,[40]]],39],[-1,[[4,[41]]],39],[-1,[[4,[42]]],39],0,[[38,7],33],[[38,7],33],[[40,7],33],[[40,7],33],[[41,7],33],[[41,7],33],[[42,7],33],[[42,7],33],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,[[38,-1],4,43],[[40,-1],4,43],[[41,-1],4,43],[[42,-1],4,43],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,13,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[44,-1],5,45],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],46],[-1,-1,[]],[-1,-1,[]],[[[47,[44]],26],[[4,[5,20]]]],[[44,[32,[28]]],40],[-1,-2,[],[]],[-1,-2,[],[]],0,[44,[[4,[1,20]]]],[[-1,46,48],[[47,[44]]],49],[[44,50,9,[11,[51]]],40],0,[44,5],[[[47,[44]]],[[4,[5,20]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,[[-1,9],[[11,[10]]],[]],[-1,13,[]]],"c":[],"p":[[4,"Endpoint",0],[4,"Addr",269],[4,"Error",270],[4,"Result",271],[15,"tuple"],[15,"bool"],[3,"Formatter",272],[3,"Error",272],[15,"str"],[6,"RPCMethod",264],[4,"Option",273],[8,"Hasher",274],[3,"String",275],[4,"SocketAddr",276],[3,"SocketAddr",277],[15,"u16"],[3,"TypeId",278],[8,"Any",278],[3,"Client",67],[4,"Error",123],[8,"Serialize",279],[8,"DeserializeOwned",280],[3,"ClientConfig",67],[8,"ToConn",281],[3,"CodecConfig",91],[6,"Conn",281],[3,"Codec",91],[15,"u8"],[3,"Vec",282],[15,"usize"],[15,"u64"],[15,"slice"],[6,"Result",272],[3,"Error",283],[3,"Error",284],[4,"Error",285],[8,"Error",286],[3,"Request",153],[8,"Deserializer",280],[3,"Response",153],[3,"Error",153],[3,"Notification",153],[8,"Serializer",279],[3,"Server",232],[8,"RPCService",264],[3,"ServerConfig",232],[3,"Arc",287],[6,"Executor",288],[8,"ToListener",289],[15,"i32"],[4,"Value",290],[6,"Result",123]]},\
"karyon_net":{"doc":"","t":"ENNGIINENNNNNNNGEGNNGNNDNNIINNDNDKAFFFFAAMMMFFFFAKKKKMMAKKAKMMGIIFKKKKKENENGNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNNENNNNNNNGNNNLLLLLLLLLLLLLLLLLLLIGIKFKKDDMFFMFFMMMAAAADLLFLMLFLLLLMLLLLLLMDDLMLLLLFFLLMLLFFMLLLLLMLLLLLLLLLLLMDLLFLMLFLLLLLLLLLLLLDLLFLMLFLLLLMLLLLLLM","n":["Addr","ChannelRecv","ChannelSend","Conn","ConnListener","Connection","Domain","Endpoint","Err","IO","InvalidAddress","InvalidDnsNameError","InvalidEndpoint","Ip","KaryonCore","Listener","NetError","NetResult","Ok","ParseEndpoint","Port","Rustls","Tcp","TcpConn","Timeout","Tls","ToConn","ToListener","TryFromEndpoint","Udp","UdpConn","Unix","UnixConn","accept","connection","dial","dial_tcp","dial_udp","dial_unix","endpoint","error","inner","inner","inner","listen","listen_tcp","listen_udp","listen_unix","listener","local_endpoint","local_endpoint","peer_endpoint","read","read","read","tls","to_conn","to_listener","transports","write","write","write","Conn","Connection","ToConn","dial","local_endpoint","peer_endpoint","read","to_conn","write","Addr","Domain","Endpoint","Ip","Port","Tcp","Tls","Udp","Unix","addr","borrow","borrow","borrow_decode","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","encode","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from_str","hash","hash","into","into","new_tcp_addr","new_tls_addr","new_udp_addr","new_unix_addr","port","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","value_as_any","value_as_any","vzip","vzip","ChannelRecv","ChannelSend","Err","Error","IO","InvalidAddress","InvalidDnsNameError","InvalidEndpoint","KaryonCore","Ok","ParseEndpoint","Result","Rustls","Timeout","TryFromEndpoint","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","value_as_any","vzip","ConnListener","Listener","ToListener","accept","listen","local_endpoint","to_listener","TlsConn","TlsListener","acceptor","dial","dial_tls","inner","listen","listen_tls","listener","read","write","tcp","tls","udp","unix","TcpConn","borrow","borrow_mut","dial_tcp","from","inner","into","listen_tcp","local_endpoint","new","peer_endpoint","read","read","to_conn","try_from","try_into","type_id","vzip","write","write","TlsConn","TlsListener","accept","acceptor","borrow","borrow","borrow_mut","borrow_mut","dial","dial_tls","from","from","inner","into","into","listen","listen_tls","listener","local_endpoint","local_endpoint","new","peer_endpoint","read","read","to_conn","to_listener","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","write","write","UdpConn","borrow","borrow_mut","dial_udp","from","inner","into","listen_udp","local_endpoint","new","peer_endpoint","read","recv_from","send_to","to_conn","try_from","try_into","type_id","vzip","write","UnixConn","borrow","borrow_mut","dial_unix","from","inner","into","listen_unix","local_endpoint","new","peer_endpoint","read","read","to_conn","try_from","try_into","type_id","vzip","write","write"],"q":[[0,"karyon_net"],[62,"karyon_net::connection"],[71,"karyon_net::endpoint"],[126,"karyon_net::error"],[160,"karyon_net::listener"],[167,"karyon_net::tls"],[178,"karyon_net::transports"],[182,"karyon_net::transports::tcp"],[202,"karyon_net::transports::tls"],[238,"karyon_net::transports::udp"],[258,"karyon_net::transports::unix"],[278,"core::future::future"],[279,"alloc::boxed"],[280,"core::pin"],[281,"alloc::string"],[282,"async_net::tcp"],[283,"async_net::unix"],[284,"bincode::error"],[285,"core::result"],[286,"bincode::de"],[287,"bincode::de"],[288,"core::fmt"],[289,"core::fmt"],[290,"core::net::socket_addr"],[291,"std::os::unix::net::addr"],[292,"core::any"],[293,"core::any"],[294,"rustls::error"],[295,"std::io::error"],[296,"async_channel"],[297,"async_channel"],[298,"core::error"],[299,"core::option"],[300,"rustls::client::client_conn"],[301,"rustls::server::server_conn"],[302,"async_net::tcp"],[303,"async_net::udp"],[304,"async_net::unix"]],"d":["Addr defines a type for an address, either IP or domain.","","","Alias for <code>Box&lt;dyn Connection&gt;</code>","ConnListener is a generic network listener.","Connection is a generic network connection interface for …","","Endpoint defines generic network endpoints for karyon.","Contains the error value","","","","","","","Alias for <code>Box&lt;dyn ConnListener&gt;</code>","Represents karyon’s Net Error","Represents karyon’s Net Result","Contains the success value","","Port defined as a u16.","","","TCP network connection implementation of the <code>Connection</code> …","","","A trait for objects which can be converted to <code>Conn</code>.","A trait for objects which can be converted to <code>Listener</code>.","","","UDP network connection implementation of the <code>Connection</code> …","","Unix domain socket implementation of the <code>Connection</code> trait.","","","Connects to the provided endpoint.","Connects to the given TCP address and port.","Connects to the given UDP address and port.","Connects to the given Unix socket path.","","","","","","Listens to the provided endpoint.","Listens on the given TCP address and port.","Listens on the given UDP address and port.","Listens on the given Unix socket path.","","Returns the local socket endpoint of this connection","","Returns the remote peer endpoint of this connection","Reads data from this connection.  ","","","","","","","Writes data to this connection","","","Alias for <code>Box&lt;dyn Connection&gt;</code>","Connection is a generic network connection interface for …","A trait for objects which can be converted to <code>Conn</code>.","Connects to the provided endpoint.","Returns the local socket endpoint of this connection","Returns the remote peer endpoint of this connection","Reads data from this connection.  ","","Writes data to this connection","Addr defines a type for an address, either IP or domain.","","Endpoint defines generic network endpoints for karyon.","","Port defined as a u16.","","","","","Returns the <code>Addr</code> of the endpoint.","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new TCP endpoint from a <code>SocketAddr</code>.","Creates a new TLS endpoint from a <code>SocketAddr</code>.","Creates a new UDP endpoint from a <code>SocketAddr</code>.","Creates a new Unix endpoint from a <code>UnixSocketAddress</code>.","Returns the <code>Port</code> of the endpoint.","","","","","","","","","","","","","","","","","Contains the error value","","","","","","","Contains the success value","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","ConnListener is a generic network listener.","Alias for <code>Box&lt;dyn ConnListener&gt;</code>","A trait for objects which can be converted to <code>Listener</code>.","","Listens to the provided endpoint.","","","TLS network connection implementation of the <code>Connection</code> …","Tls network listener implementation of the <code>Listener</code> …","","Connects to the given TLS endpoint, returns <code>Conn</code> (…","Connects to the given TLS address and port.","","Listens on the given TLS endpoint, returns <code>Listener</code> …","Listens on the given TLS address and port.","","","","","","","","TCP network connection implementation of the <code>Connection</code> …","","","Connects to the given TCP address and port.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Listens on the given TCP address and port.","","Creates a new TcpConn","","","","","","","","","","","TLS network connection implementation of the <code>Connection</code> …","Tls network listener implementation of the <code>Listener</code> …","","","","","","","Connects to the given TLS endpoint, returns <code>Conn</code> (…","Connects to the given TLS address and port.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Listens on the given TLS endpoint, returns <code>Listener</code> …","Listens on the given TLS address and port.","","","","Creates a new TlsConn","","","","","","","","","","","","","","","","UDP network connection implementation of the <code>Connection</code> …","","","Connects to the given UDP address and port.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Listens on the given UDP address and port.","","Creates a new UdpConn","","","Receives a single datagram message. Returns the number of …","Sends data to the given address. Returns the number of …","","","","","","","Unix domain socket implementation of the <code>Connection</code> trait.","","","Connects to the given Unix socket path.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Listens on the given Unix socket path.","","Creates a new UnixConn","","","","","","","","","",""],"i":[0,35,35,0,0,0,7,0,6,35,35,35,35,7,35,0,0,0,6,35,0,35,4,0,35,4,0,0,35,4,0,4,0,13,0,0,0,0,0,0,0,9,10,12,0,0,0,0,0,45,13,45,45,9,12,0,54,55,0,45,9,12,0,0,0,0,45,45,45,54,45,0,7,0,7,0,4,4,4,4,4,4,7,7,4,7,4,7,4,7,7,7,4,7,4,7,4,4,7,7,4,7,4,4,7,4,7,4,4,4,4,4,4,7,4,7,4,7,4,7,4,7,4,7,4,7,35,35,6,0,35,35,35,35,35,6,35,0,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,0,0,0,13,0,13,55,0,0,48,0,0,46,0,0,48,46,46,0,0,0,0,0,9,9,0,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,0,0,48,48,46,48,46,48,0,0,46,48,46,46,48,0,0,48,46,48,46,46,46,46,46,48,46,48,46,48,46,48,46,48,46,46,0,10,10,0,10,10,10,0,10,10,10,10,10,10,10,10,10,10,10,10,0,12,12,0,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[3,[[2,[1]]]]],[]],0,[4,[[6,[5]]]],[[7,8],[[6,[9]]]],[[7,8],[[6,[10]]]],[11,[[6,[12]]]],0,0,0,0,0,[4,[[6,[[2,[13]]]]]],[[7,8],[[6,[14]]]],[[7,8],[[6,[10]]]],[11,[[6,[15]]]],0,[-1,[[6,[4]]],[]],[-1,[[6,[4]]],[]],[-1,[[6,[4]]],[]],[[-1,[17,[16]]],[[3,[[2,[1]]]]],[]],0,0,0,[-1,5,[]],[-1,18,[]],0,[[-1,[17,[16]]],[[3,[[2,[1]]]]],[]],0,0,0,0,0,[4,[[6,[5]]]],[-1,[[6,[4]]],[]],[-1,[[6,[4]]],[]],[[-1,[17,[16]]],[[3,[[2,[1]]]]],[]],[-1,5,[]],[[-1,[17,[16]]],[[3,[[2,[1]]]]],[]],0,0,0,0,0,0,0,0,0,[4,[[6,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[20,[7,19]]],21],[-1,-2,[],[]],[-1,-2,[],[]],[4,4],[7,7],[[-1,-2],22,[],[]],[[-1,-2],22,[],[]],[-1,[[20,[7,19]]],23],[[7,-1],[[20,[22,24]]],25],[[4,4],26],[[7,7],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[4,27],28],[[4,27],28],[[7,27],28],[[7,27],28],[-1,-1,[]],[-1,-1,[]],[29,[[20,[4]]]],[[4,-1],22,30],[[7,-1],22,30],[-1,-2,[],[]],[-1,-2,[],[]],[31,4],[31,4],[31,4],[32,4],[4,[[6,[8]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[]],[-1,11,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,34,[]],[-1,34,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[35,27],28],[[35,27],28],[36,35],[37,35],[38,35],[-1,-1,[]],[39,35],[[[40,[-1]]],35,[]],[41,35],[-1,-2,[],[]],[35,[[43,[42]]]],[-1,11,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,34,[]],[-1,-2,[],[]],0,0,0,[-1,[[3,[[2,[1]]]]],[]],[4,[[6,[[2,[13]]]]]],[-1,[[6,[4]]],[]],[-1,18,[]],0,0,0,[[4,44,29],[[6,[[2,[45]]]]]],[[7,8,44,29],[[6,[46]]]],0,[[4,47],[[6,[[2,[13]]]]]],[[7,8,47],[[6,[48]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[7,8],[[6,[9]]]],[-1,-1,[]],0,[-1,-2,[],[]],[[7,8],[[6,[14]]]],[9,[[6,[4]]]],[49,9],[9,[[6,[4]]]],[[9,[17,[16]]],[[3,[[2,[1]]]]]],0,[9,[[2,[45]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,-2,[],[]],[[9,[17,[16]]],[[3,[[2,[1]]]]]],0,0,0,[48,[[3,[[2,[1]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[4,44,29],[[6,[[2,[45]]]]]],[[7,8,44,29],[[6,[46]]]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[4,47],[[6,[[2,[13]]]]]],[[7,8,47],[[6,[48]]]],0,[46,[[6,[4]]]],[48,[[6,[4]]]],[[49,[50,[49]]],46],[46,[[6,[4]]]],[[46,[17,[16]]],[[3,[[2,[1]]]]]],0,[46,[[2,[45]]]],[48,[[2,[13]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[46,[17,[16]]],[[3,[[2,[1]]]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[7,8],[[6,[10]]]],[-1,-1,[]],0,[-1,-2,[],[]],[[7,8],[[6,[10]]]],[10,[[6,[4]]]],[51,10],[10,[[6,[4]]]],[[10,[17,[16]]],[[3,[[2,[1]]]]]],[[10,[17,[16]]],[[6,[[22,[52,4]]]]]],[[10,[17,[16]],4],[[6,[52]]]],[10,[[2,[45]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,-2,[],[]],[[10,[17,[16]]],[[3,[[2,[1]]]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[11,[[6,[12]]]],[-1,-1,[]],0,[-1,-2,[],[]],[11,[[6,[15]]]],[12,[[6,[4]]]],[53,12],[12,[[6,[4]]]],[[12,[17,[16]]],[[3,[[2,[1]]]]]],0,[12,[[2,[45]]]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,33,[]],[-1,-2,[],[]],[[12,[17,[16]]],[[3,[[2,[1]]]]]],0],"c":[],"p":[[8,"Future",278],[3,"Box",279],[3,"Pin",280],[4,"Endpoint",71],[6,"Conn",62],[6,"Result",126],[4,"Addr",71],[6,"Port",71],[3,"TcpConn",182],[3,"UdpConn",238],[3,"String",281],[3,"UnixConn",258],[8,"ConnListener",160],[3,"TcpListener",282],[3,"UnixListener",283],[15,"u8"],[15,"slice"],[6,"Listener",160],[4,"DecodeError",284],[4,"Result",285],[8,"BorrowDecoder",286],[15,"tuple"],[8,"Decoder",286],[4,"EncodeError",284],[8,"Encoder",287],[15,"bool"],[3,"Formatter",288],[6,"Result",288],[15,"str"],[8,"Hasher",289],[4,"SocketAddr",290],[3,"SocketAddr",291],[3,"TypeId",292],[8,"Any",292],[4,"Error",126],[4,"Error",293],[4,"Error",294],[3,"Error",295],[3,"RecvError",296],[3,"SendError",296],[3,"InvalidDnsNameError",297],[8,"Error",298],[4,"Option",299],[3,"ClientConfig",300],[8,"Connection",62],[3,"TlsConn",202],[3,"ServerConfig",301],[3,"TlsListener",202],[3,"TcpStream",282],[4,"TlsStream",302],[3,"UdpSocket",303],[15,"usize"],[3,"UnixStream",283],[8,"ToConn",62],[8,"ToListener",160]]},\
"karyon_p2p":{"doc":"A lightweight, extensible, and customizable peer-to-peer …","t":"GGDNNDNNNNNNNNNNNENNNNDNNNNNNDNNMMAMAAMAAAMMMAMMMMAMMMMMMAAMMAMAMMMMMAAMMMMMMAMAAMAMGDMLLLLMMLLLLMLMLLMLMMLLLLLLDILLMLLLLLLLLLLLLDMLLLMMLMMLMMMMMMMMMMMMMMMLLLMLEDNDNLLLLLLLLMMMMLLLLLLLLLLLMLLLLLLLLLLLLLLLDHLLLLMLMLLMMMLLMLLLLGDMLLMMLLMLMLMAMLMMMLAMLLLLMMLLLLLDRLLMLMLLLMLMMMLMLLLLLLLLLLLLLMLLLLRRDDDLLLLLLLLLLMLLLLLLMLLLLLLLLMLLMLLLLLLLMMLLLLLLLLLLLLLLLNNNNNENNNNNNNNNNNNNNNNGNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLDLLMMLLMLLMLLLMLLLLNDRRDEDNDNDNDNDNDNDDDNNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOMLLLLLLLLLLLLMMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLNNNENNNNNENNNNNDENNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGDCMLLLMLMLLLMLLLALMMMMMLLLMLLLLMMLLLLDLLLLLLLLLLLLLLLLLLLLLLLLLGDGMMLLLLMMLLMLMLLMLLMLMMMLMMLLLLLLMLLLLLLGNIGEGNMLLLLLLKLLMMKLLLLLMKLCARNDENLLLLLLLLLLLLLLLLMMLMLLMLLLLLLLLLLLENCCCCRCCNCNCRRCNDRCCLLLLLALLMLLALLLLLLLMLLLFLLLLLLLLLLLLCRRDDRRGRRRRLLLLLLLLLLMMMLLLLLLLLLLLMLLLLMLLLLLLLLLLLLLDRGMLLLLLLMLLLLLLMMLLLLLLFDLLLLLLMLLMMLLLLLRRHDHHDLLLLLLLFLLFMFFLLLLLLFFLLLLLLDDLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLLMLLFLL","n":["ArcBackend","ArcPeer","Backend","ChannelRecv","ChannelSend","Config","Config","Discovery","IO","IncompatiblePeer","IncompatibleVersion","InvalidDnsNameError","InvalidMsg","InvalidPongMsg","KaryonCore","KaryonNet","Lookup","P2pError","ParseError","ParseFloatError","ParseIntError","PeerAlreadyConnected","PeerID","PeerShutdown","Rcgen","Rustls","SemverError","TryFromPublicKey","UnsupportedProtocol","Version","X509Parser","Yasna","alloc","alloc","backend","bootstrap_peers","codec","config","config","connection","connector","discovery","discovery","discovery_port","enable_tls","error","handshake_timeout","inbound_slots","key_pair","listen_endpoint","listener","lookup_connect_retries","lookup_connection_lifespan","lookup_inbound_slots","lookup_outbound_slots","lookup_response_timeout","max_connect_retries","message","monitor","monitor","outbound_slots","peer","peer_endpoints","peer_pool","peer_pool","phantom","phantom","ping_interval","ping_timeout","protocol","protocols","ptr","ptr","refresh_connect_retries","refresh_interval","refresh_response_timeout","req","routing_table","seeding_interval","slots","tls_config","v","version","version","ArcBackend","Backend","alloc","attach_protocol","borrow","borrow_mut","config","config","discovery","from","inbound_slots","into","key_pair","key_pair","monitor","monitor","new","outbound_slots","peer_pool","peers","phantom","ptr","run","shutdown","try_from","try_into","type_id","vzip","Codec","CodecMsg","borrow","borrow_mut","conn","from","into","new","read","read_exact","read_timeout","try_from","try_into","type_id","vzip","write","write_all","Config","bootstrap_peers","borrow","borrow_mut","default","discovery_port","enable_tls","from","handshake_timeout","inbound_slots","into","listen_endpoint","lookup_connect_retries","lookup_connection_lifespan","lookup_inbound_slots","lookup_outbound_slots","lookup_response_timeout","max_connect_retries","outbound_slots","peer_endpoints","ping_interval","ping_timeout","refresh_connect_retries","refresh_interval","refresh_response_timeout","seeding_interval","try_from","try_into","type_id","version","vzip","ConnDirection","ConnQueue","Inbound","NewConn","Outbound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","conn","conn_available","direction","disconnect_signal","fmt","fmt","from","from","from","handle","into","into","into","new","next","queue","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_as_any","vzip","vzip","vzip","Connector","DNS_NAME","borrow","borrow_mut","connect","connect_with_cback","connection_slots","dial","enable_tls","from","into","key_pair","max_retries","monitor","new","shutdown","task_group","try_from","try_into","type_id","vzip","ArcDiscovery","Discovery","alloc","borrow","borrow_mut","config","conn_queue","connect","connect_loop","connector","from","inbound_slots","into","listener","lookup","lookup_service","new","outbound_slots","phantom","ptr","random_entry","refresh","refresh_service","shutdown","start","start_listener","start_seeding","table","task_group","try_from","try_into","type_id","update_entry","vzip","LookupService","MAX_PEERS_IN_PEERSMSG","borrow","borrow_mut","config","connect","connector","from","handle_inbound","handle_outbound","id","into","listen_endpoint","listener","monitor","new","outbound_slots","random_lookup","self_lookup","send_findpeer_msg","send_peer_msg","send_peers_msg","send_ping_msg","send_pong_msg","send_shutdown_msg","set_listen_endpoint","shutdown","start","start_listener","start_lookup","table","try_from","try_into","type_id","vzip","MAX_FAILURES","PINGMSG_SIZE","PingMsg","PongMsg","RefreshService","borrow","borrow","borrow","borrow_decode","borrow_decode","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","config","connect","decode","decode","do_refresh","encode","encode","executor","fmt","fmt","from","from","from","into","into","into","listen_endpoint","listen_loop","listen_to_ping_msg","monitor","new","refresh_entry","refresh_loop","send_ping_msg","set_listen_endpoint","shutdown","start","table","task_group","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","value_as_any","value_as_any","vzip","vzip","vzip","ChannelRecv","ChannelSend","Config","Discovery","Err","Error","IO","IncompatiblePeer","IncompatibleVersion","InvalidDnsNameError","InvalidMsg","InvalidPongMsg","KaryonCore","KaryonNet","Lookup","Ok","ParseError","ParseFloatError","ParseIntError","PeerAlreadyConnected","PeerShutdown","Rcgen","Result","Rustls","SemverError","TryFromPublicKey","UnsupportedProtocol","X509Parser","Yasna","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","value_as_any","vzip","Listener","borrow","borrow_mut","connection_slots","enable_tls","from","into","key_pair","listen_loop","listend","monitor","new","shutdown","start","task_group","try_from","try_into","type_id","vzip","FindPeer","FindPeerMsg","MAX_ALLOWED_MSG_SIZE","MSG_HEADER_SIZE","NetMsg","NetMsgCmd","NetMsgHeader","Peer","PeerMsg","Peers","PeersMsg","Ping","PingMsg","Pong","PongMsg","Protocol","ProtocolMsg","Shutdown","ShutdownMsg","VerAckMsg","VerMsg","Verack","Version","ack","addr","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_decode","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","command","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","decode","discovery_port","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","encode","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","get_msg_payload","header","into","into","into","into","into","into","into","into","into","into","into","into","nonce","payload","payload","payload_size","peer_id","peer_id","peer_id","port","protocol_id","protocols","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","value_as_any","version","version","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AcceptFailed","Accepted","Conn","ConnEvent","ConnectFailed","ConnectRetried","Connected","Disconnected","Discovery","DiscoveryEvent","ListenFailed","Listening","LookupFailed","LookupStarted","LookupSucceeded","Monitor","MonitorEvent","NewPeer","PeerPool","PeerPoolEvent","RefreshStarted","RemovePeer","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","inner","into","into","into","into","into","new","notify","subscribe","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_as_any","value_as_any","value_as_any","value_as_any","vzip","vzip","vzip","vzip","vzip","ArcPeer","Peer","PeerID","alloc","borrow","borrow_mut","broadcast","codec","config","conn_direction","direction","from","id","id","into","is_inbound","new","peer_id","peer_pool","peer_pool","phantom","protocol_events","protocol_ids","ptr","read_loop","register_listener","remote_endpoint","remote_endpoint","run","send","shutdown","start_protocols","stop_chan","task_group","try_from","try_into","type_id","vzip","PeerID","borrow","borrow_decode","borrow_mut","clone","clone_into","decode","encode","eq","equivalent","fmt","fmt","from","from","hash","into","new","random","to_owned","to_string","try_from","try_from","try_into","type_id","value_as_any","vzip","ArcPeerPool","PeerPool","WeakPeerPool","alloc","alloc","attach_protocol","borrow","borrow_mut","broadcast","config","conn_queue","contains_peer","do_handshake","executor","from","id","into","listen_loop","monitor","new","new_peer","peers","peers_len","phantom","protocol_versions","protocols","protocols_match","ptr","ptr","remove_peer","send_verack","send_vermsg","setup_protocols","shutdown","start","task_group","try_from","try_into","type_id","vzip","wait_verack","wait_vermsg","ArcProtocol","Message","Protocol","ProtocolConstructor","ProtocolEvent","ProtocolID","Shutdown","alloc","borrow","borrow_mut","clone","clone_into","fmt","from","id","id","into","phantom","ptr","start","to_owned","try_from","try_into","type_id","value_as_any","vec","version","vzip","PingProtocol","ping","MAX_FAILUERS","Ping","PingProtocol","PingProtocolMsg","Pong","borrow","borrow","borrow_decode","borrow_mut","borrow_mut","clone","clone_into","decode","encode","fmt","from","from","id","into","into","new","peer","ping_interval","ping_loop","ping_timeout","recv_loop","start","task_group","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","value_as_any","version","vzip","vzip","AddEntryResult","Added","Bucket","BucketEntry","CONNECTED_ENTRY","DISCONNECTED_ENTRY","DISTANCE_LIMIT","Entry","EntryStatusFlag","Exists","INCOMPATIBLE_ENTRY","Ignored","Key","MAX_MATCHED_SUBNET_IN_BUCKET","MAX_MATCHED_SUBNET_IN_TABLE","PENDING_ENTRY","Restricted","RoutingTable","TABLE_SIZE","UNREACHABLE_ENTRY","UNSTABLE_ENTRY","add_entry","borrow","borrow","borrow_mut","borrow_mut","bucket","bucket_index","bucket_indexes","buckets","closest_entries","contains_key","entry","fmt","fmt","from","from","into","into","iter","key","new","random_entry","remove_entry","subnet_match","subnet_restricted","try_from","try_from","try_into","try_into","type_id","type_id","update_entry","value_as_any","value_as_any","vzip","vzip","xor_distance","ALL_ENTRY","BUCKET_SIZE","Bucket","BucketEntry","CONNECTED_ENTRY","DISCONNECTED_ENTRY","EntryStatusFlag","INCOMPATIBLE_ENTRY","PENDING_ENTRY","UNREACHABLE_ENTRY","UNSTABLE_ENTRY","add","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","contains_key","entries","entry","failures","fmt","fmt","from","from","into","into","is_connected","is_incompatible","is_unreachable","is_unstable","iter","last_seen","len","new","random_iter","remove","status","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","update_entry","value_as_any","value_as_any","vzip","vzip","Entry","KEY_SIZE","Key","addr","borrow","borrow_decode","borrow_mut","clone","clone_into","decode","discovery_port","encode","eq","fmt","from","from","into","key","port","to_owned","try_from","try_into","type_id","value_as_any","vzip","xor_distance","ConnectionSlots","add","borrow","borrow_mut","from","into","load","max_slots","new","remove","signal","slots","try_from","try_into","type_id","vzip","wait_for_slot","BAD_ENCODING_ERR","BAD_SIGNATURE_ERR","CIPHER_SUITES","CliCertVerifier","KX_GROUPS","PROTOCOL_VERSIONS","SrvrCertVerifier","borrow","borrow","borrow_mut","borrow_mut","client_auth_root_subjects","from","from","generate_cert","into","into","parse_cert","peer_id","tls_client_config","tls_server_config","try_from","try_from","try_into","try_into","type_id","type_id","verify_cert","verify_cert_signature","verify_client_cert","verify_server_cert","verify_tls13_signature","verify_tls13_signature","vzip","vzip","Version","VersionInt","borrow","borrow","borrow_decode","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode","encode","fmt","fmt","fmt","from","from","from_str","from_str","into","into","major","minor","new","patch","req","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","v","value_as_any","value_as_any","version_match","vzip","vzip"],"q":[[0,"karyon_p2p"],[84,"karyon_p2p::backend"],[112,"karyon_p2p::codec"],[129,"karyon_p2p::config"],[160,"karyon_p2p::connection"],[204,"karyon_p2p::connector"],[225,"karyon_p2p::discovery"],[259,"karyon_p2p::discovery::lookup"],[294,"karyon_p2p::discovery::refresh"],[353,"karyon_p2p::error"],[408,"karyon_p2p::listener"],[427,"karyon_p2p::message"],[654,"karyon_p2p::monitor"],[751,"karyon_p2p::peer"],[789,"karyon_p2p::peer::peer_id"],[815,"karyon_p2p::peer_pool"],[857,"karyon_p2p::protocol"],[885,"karyon_p2p::protocols"],[887,"karyon_p2p::protocols::ping"],[926,"karyon_p2p::routing_table"],[984,"karyon_p2p::routing_table::bucket"],[1038,"karyon_p2p::routing_table::entry"],[1064,"karyon_p2p::slots"],[1081,"karyon_p2p::tls_config"],[1116,"karyon_p2p::version"],[1158,"core::result"],[1159,"core::ops::function"],[1160,"core::marker"],[1161,"core::marker"],[1162,"karyon_core::crypto::key_pair"],[1163,"karyon_core::pubsub"],[1164,"karyon_core"],[1165,"core::any"],[1166,"karyon_net::connection"],[1167,"alloc::boxed"],[1168,"core::time"],[1169,"core::fmt"],[1170,"core::fmt"],[1171,"core::any"],[1172,"core::option"],[1173,"core::ops::function"],[1174,"async_lock::mutex"],[1175,"bincode::error"],[1176,"bincode::de"],[1177,"bincode::de"],[1178,"karyon_net::endpoint"],[1179,"async_channel"],[1180,"rustls::error"],[1181,"std::io::error"],[1182,"rcgen::error"],[1183,"core::num::error"],[1184,"x509_parser::error"],[1185,"karyon_core::error"],[1186,"karyon_net::error"],[1187,"async_channel"],[1188,"core::num::dec2flt"],[1189,"yasna::reader::error"],[1190,"rustls::dns_name"],[1191,"core::error"],[1192,"karyon_net::listener"],[1193,"core::clone"],[1194,"alloc::sync"],[1195,"core::hash"],[1196,"karyon_core::crypto::key_pair"],[1197,"core::future::future"],[1198,"core::pin"],[1199,"async_channel"],[1200,"rustls::msgs::handshake"],[1201,"rustls::key"],[1202,"rustls::key"],[1203,"rustls::client::client_conn"],[1204,"rustls::server::server_conn"],[1205,"std::time"],[1206,"rustls::verify"],[1207,"rustls::client::client_conn"]],"d":["","","Backend serves as the central entry point for initiating …","","","the Configuration for the P2P network.","","","","","","","","","","","","Represents karyon’s p2p Error.","","","","","Represents a unique identifier for a peer.","","","","","","","Represents the network version and protocol version used …","","","","","","A list of bootstrap peers for the seeding process.","","","The Configuration for the P2P network.","","","","Discovery instance.","TCP/UDP port for lookup and refresh processes.","Enables TLS for all connections.","","Timeout duration for the handshake with new peers, in …","The number of available inbound slots for incoming …","Identity Key pair","An optional listening endpoint to accept incoming …","","The maximum number of retries for outbound connection …","Maximum allowable time for a live connection with a peer …","The number of available inbound slots for incoming …","The number of available outbound slots for outgoing …","Timeout duration for a peer response during the lookup …","The maximum number of retries for outbound connection …","","Responsible for network and system monitoring. <code>Read More</code>","Responsible for network and system monitoring.","The number of available outbound slots for outgoing …","","A list of endpoints representing peers that the <code>Discovery</code> …","","PeerPool instance.","","","Interval at which the ping protocol sends ping messages to …","Timeout duration for receiving the pong message …","Defines the protocol trait. <code>Read More</code>","","","","The maximum number of retries for outbound connection …","Interval at which the table refreshes its entries, in …","Timeout duration for a peer response during the table …","","","Time interval, in seconds, at which the Discovery restarts …","","","","","Represents the network version.","","Backend serves as the central entry point for initiating …","","Attach a custom protocol to the network","","","Returns the <code>Config</code>.","The Configuration for the P2P network.","Discovery instance.","Returns the argument unchanged.","Returns the number of occupied inbound slots.","Calls <code>U::from(self)</code>.","Returns the <code>KeyPair</code>.","Identity Key pair","Subscribes to the monitor to receive network events.","Responsible for network and system monitoring.","Creates a new Backend.","Returns the number of occupied outbound slots.","PeerPool instance.","Returns the number of currently connected peers.","","","Run the Backend, starting the PeerPool and Discovery …","Shuts down the Backend.","","","","","A Codec working with generic network connections.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new Codec.","Reads a message of type <code>NetMsg</code> from the connection.","Reads the exact number of bytes required to fill <code>buf</code>.","Reads a message of type <code>NetMsg</code> with the given timeout.","","","","","Writes a message of type <code>T</code> to the connection.","Writes an entire buffer into the connection.","the Configuration for the P2P network.","A list of bootstrap peers for the seeding process.","","","","TCP/UDP port for lookup and refresh processes.","Enables TLS for all connections.","Returns the argument unchanged.","Timeout duration for the handshake with new peers, in …","The number of available inbound slots for incoming …","Calls <code>U::from(self)</code>.","An optional listening endpoint to accept incoming …","The maximum number of retries for outbound connection …","Maximum allowable time for a live connection with a peer …","The number of available inbound slots for incoming …","The number of available outbound slots for outgoing …","Timeout duration for a peer response during the lookup …","The maximum number of retries for outbound connection …","The number of available outbound slots for outgoing …","A list of endpoints representing peers that the <code>Discovery</code> …","Interval at which the ping protocol sends ping messages to …","Timeout duration for receiving the pong message …","The maximum number of retries for outbound connection …","Interval at which the table refreshes its entries, in …","Timeout duration for a peer response during the table …","Time interval, in seconds, at which the Discovery restarts …","","","","Represents the network version.","","Defines the direction of a network connection.","Connection queue","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Push a connection into the queue and wait for the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Receive the next connection in the queue","","","","","","","","","","","","","","","","","Responsible for creating outbound connections with other …","","","","Establish a connection to the specified <code>endpoint</code>. If the …","Establish a connection to the given <code>endpoint</code>. For each new …","Manages available outbound slots.","","Enables secure connection.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Identity Key pair","The maximum number of retries allowed before successfully …","Responsible for network and system monitoring.","Creates a new Connector","Shuts down the connector","Managing spawned tasks.","","","","","","","","","","Holds the configuration for the P2P network.","Connection queue","Connect to the given endpoint using the connector","This method will attempt to connect to a peer in the …","Connector","Returns the argument unchanged.","Inbound slots.","Calls <code>U::from(self)</code>.","Listener","","Lookup Service","Creates a new Discovery","Outbound slots.","","","Returns a random entry from routing table.","","Refresh Service","Shuts down the discovery","Start the Discovery","Start a listener and on success, return the resolved …","Starts seeding process.","Routing table","Managing spawned tasks.","","","","Update the entry status  ","","","Maximum number of peers that can be returned in a PeersMsg.","","","Holds the configuration for the P2P network.","Connects to the given endpoint and initiates a lookup …","Connector","Returns the argument unchanged.","Handles inbound connection","Handles outbound connection","Peer’s ID","Calls <code>U::from(self)</code>.","Resolved listen endpoint","Listener","Responsible for network and system monitoring.","Creates a new lookup service","Outbound slots.","Starts a random lookup","Starts a self lookup","Sends a FindPeer msg and wait to receivet the Peers msg.","Sends a Peer msg.","Sends a Peers msg.","Sends a Ping msg and wait to receive the Pong message.","Sends a Pong msg","Sends a Shutdown msg.","Set the resolved listen endpoint.","Shuts down the lookup service.","Start the lookup service.","Start a listener.","Starts iterative lookup and populate the routing table.","Routing Table","","","","","Maximum failures for an entry before removing it from the …","Ping message size","","","","","","","","","","","","","","Holds the configuration for the P2P network.","Initiates a UDP connection with the entry and attempts to …","","","Iterates over the entries and spawns a new task for each …","","","A global executor","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Resolved listen endpoint","Set up a UDP listener and start listening for Ping …","Listen to receive a Ping message and respond with a Pong …","Responsible for network and system monitoring.","Creates a new refresh service","Initiates refresh for a specific entry within the routing …","Initiates periodic refreshing of the routing table. This …","Sends a Ping msg and wait to receive the Pong message.","Set the resolved listen endpoint.","Shuts down the refresh service","Start the refresh service","Routing table","Managing spawned tasks.","","","","","","","","","","","","","","","","","","","","Contains the error value","Represents karyon’s p2p Error.","","","","","","","","","","Contains the success value","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","","","","","","","","Responsible for creating inbound connections with other …","","","Manages available inbound slots.","Enables secure connection.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Identity Key pair","","","Responsible for network and system monitoring.","Creates a new Listener","Shuts down the listener","Starts a listener on the given <code>endpoint</code>. For each incoming …","Managing spawned tasks.","","","","","","FindPeer message used to find a specific peer.","The maximum allowed size for a message in bytes.","The size of the message header, in bytes.","Defines the main message in the karyon p2p network.","Defines message commands.","Represents the header of a message.","","PeerMsg containing information about a peer.","","PeersMsg a list of <code>PeerMsg</code>.","","Ping message with a nonce and version information.","","Ping message with a nonce.","","Defines a message related to a specific protocol.","","Shutdown message.","VerAck message acknowledges the receipt of a Version …","Version message, providing information about a peer’s …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines connection-related events.","","","","","","Defines <code>Discovery</code> events.","","","","","","Responsible for network and system monitoring.","Defines various type of event that can be monitored.","","","Defines <code>PeerPool</code> events.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new Monitor","Sends a new monitor event to all subscribers.","Subscribes to listen to new events.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Broadcast a message to all connected peers using the …","Holds the Codec for the peer connection","Returns the <code>Config</code> instance.","The direction of the connection, either <code>Inbound</code> or <code>Outbound</code>","Returns the direction of the connection, which can be …","Returns the argument unchanged.","Return the peer’s ID","Peer’s ID","Calls <code>U::from(self)</code>.","Check if the connection is Inbound","Creates a new peer","","","A weak pointer to <code>PeerPool</code>","","<code>EventSys</code> responsible for sending events to the protocols.","A list of protocol IDs","","Start a read loop to handle incoming messages from the …","Registers a listener for the given Protocol <code>P</code>.","Returns the remote endpoint for the peer","Remote endpoint for the peer","Run the peer","Send a message to the peer connection using the specified …","Shuts down the peer","Start running the protocols for this peer connection.","This channel is used to send a stop signal to the read …","Managing spawned tasks.","","","","","Represents a unique identifier for a peer.","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Creates a new PeerID.","Generates a random PeerID.","","","","","","","","","","","","","","Attach a custom protocol to the network","","","Broadcast a message to all connected peers using the …","The Configuration for the P2P network.","Connection queue","Checks if the peer list contains a peer with the given …","Initiate a handshake with a connection.","A global Executor","Returns the argument unchanged.","Peer’s ID","Calls <code>U::from(self)</code>.","Listens to a new connection from the connection queue","Responsible for network and system monitoring.","Creates a new PeerPool","Add a new peer to the peer list.","Holds the running peers.","Returns the number of currently connected peers.","","Hashmap contains protocol IDs and their versions.","Hashmap contains protocol constructors.","Check if the new connection has compatible protocols.","","","Shuts down the peer and remove it from the peer list.","Send a Verack message","Send a Version message","Attach the core protocols.","Shuts down","Start","Managing spawned tasks.","","","","","Wait for a Verack message","Wait for a Version message","","Message event, contains a vector of bytes.","The Protocol trait defines the interface for core protocols","","Protocol event","","Shutdown event signals the protocol to gracefully shut …","","","","","","","Returns the argument unchanged.","Returns the unique ProtocolID associated with the protocol.","","Calls <code>U::from(self)</code>.","","","Start the protocol","","","","","","","Returns the version of the protocol.","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Represents the possible result when adding a new entry.","The entry is added.","","","","","The distance limit for the closest buckets.","","","The entry is already exists.","","The entry is ignored.","","The maximum number of matched subnets allowed within a …","The maximum number of matched subnets across the entire …","","The entry is restricted and not allowed.","This is a modified version of the Kademlia Distributed …","The total number of buckets in the routing table.","","","Adds a new entry to the table and returns a result …","","","","","","","Returns a list of bucket indexes that are closest to the …","","Returns a list of the closest entries to the given target …","Check if the table contains the given key.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns an iterator of entries.","","Creates a new RoutingTable","Returns a random entry from the routing table.","Removes an entry with the given key from the routing …","Check if two addresses belong to the same subnet.","This function iterate through the routing table and counts …","","","","","","","Updates the status of an entry in the routing table …","","","","","","","The number of entries that can be stored within a single …","A Bucket represents a group of entries in the routing …","A BucketEntry represents a peer in the routing table.","The entry is connected.","The entry is disconnected. This will increase the failure …","BITFLAGS represent the status of an Entry within a bucket.","The entry is incompatible. This entry will not contribute …","The entry is ready to reconnect, meaning it has either …","The entry is unreachable. This will increase the failure …","The entry is unstable. This will increase the failure …","Add an entry to the bucket.","","","","","","","","","Check if the bucket contains the given key.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Returns an iterator over the entries in the bucket.","","Get the number of entries in the bucket.","Creates a new empty Bucket","Returns an iterator of entries in random order.","Remove an entry.","","","","","","","","","","Updates the status of an entry in the bucket identified by …","","","","","An Entry represents a peer in the routing table.","Specifies the size of the key, in bytes.","The unique key identifying the peer.","The IP address of the peer.","","","","","","","UDP/TCP port","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","The unique key identifying the peer.","TCP port","","","","","","","Calculates the XOR distance between two provided keys.","Manages available inbound and outbound slots.","Increases the occupied slots by one.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns the number of occupied slots","The maximum number of slots.","Creates a new ConnectionSlots","Decreases the occupied slots by one and notifies the …","A condvar for notifying when a slot become available.","The number of occupied slots","","","","","Waits for a slot to become available.","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Generates a certificate and returns both the certificate …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Parses the given x509 certificate.","","Returns a TLS client configuration.","Returns a TLS server configuration.","","","","","","","Verifies the given certification.","Verifies the signature of the given certificate.","","","","","","","Represents the network version and protocol version used …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Creates a new Version","","","","","","","","","","","","","","","Check if a version satisfies a version request.","",""],"i":[0,0,0,3,3,0,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,0,3,3,3,3,3,3,0,3,3,15,96,0,8,0,0,1,0,0,0,1,8,8,0,8,8,1,8,0,8,8,8,8,8,8,0,0,1,8,0,8,0,1,15,96,8,8,0,0,15,96,8,8,8,108,0,8,0,0,108,0,8,0,0,15,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,15,15,1,1,1,1,1,1,0,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,26,0,26,31,29,26,31,29,26,26,26,31,29,31,31,26,26,31,29,26,29,31,29,26,29,29,29,26,26,31,29,26,31,29,26,31,29,26,26,31,29,26,0,0,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,0,131,42,42,42,42,42,42,42,42,42,42,42,0,42,42,42,131,131,42,0,42,42,42,42,42,42,42,42,42,42,42,42,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,0,0,0,0,0,56,52,55,52,55,56,52,55,52,52,56,56,52,55,56,52,55,56,52,55,56,52,55,56,52,55,56,56,56,56,56,56,56,56,56,56,56,56,56,52,56,52,55,56,52,55,56,52,55,52,55,56,52,55,3,3,3,3,132,0,3,3,3,3,3,3,3,3,3,132,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,24,0,0,0,0,0,0,24,0,24,0,24,0,24,0,24,0,24,0,0,0,24,24,84,46,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,46,20,81,24,82,83,84,85,86,46,81,20,81,24,82,83,84,85,86,87,88,46,50,46,20,81,24,82,83,84,85,86,87,88,46,50,46,46,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,46,50,0,20,20,81,24,82,83,84,85,86,87,88,46,50,86,20,82,81,83,84,46,46,82,83,20,81,24,82,83,84,85,86,46,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,50,20,81,24,82,83,84,85,86,87,88,46,50,83,86,20,81,24,82,83,84,85,86,87,88,46,50,89,89,12,0,89,89,89,89,12,0,89,89,91,91,91,0,0,90,12,0,91,90,41,12,89,90,91,41,12,89,90,91,12,89,90,91,12,89,90,91,12,12,89,89,90,90,91,91,41,12,12,12,12,89,90,91,41,41,12,89,90,91,41,41,41,12,89,90,91,12,89,90,91,41,12,89,90,91,41,12,89,90,91,41,12,89,90,91,12,89,90,91,41,12,89,90,91,0,0,0,96,92,92,92,92,92,92,92,92,92,92,92,92,92,0,92,92,96,92,92,96,92,92,92,92,92,92,92,92,92,92,92,92,92,92,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,0,0,0,133,134,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,133,94,94,94,133,134,94,94,94,94,94,94,94,94,94,94,94,94,94,0,97,0,0,0,0,97,110,97,97,97,97,97,97,135,97,97,110,110,135,97,97,97,97,97,93,135,97,0,0,0,109,0,0,109,111,109,109,111,109,109,109,109,109,109,111,109,111,111,109,111,111,111,111,111,111,111,111,109,111,109,111,109,111,109,109,111,111,109,0,113,0,0,0,0,0,0,0,113,0,113,0,0,0,0,113,0,0,0,0,48,113,48,113,48,0,48,48,48,48,48,0,113,48,113,48,113,48,48,48,48,48,48,0,48,113,48,113,48,113,48,48,113,48,113,48,0,0,0,0,0,0,0,0,0,0,0,0,115,58,115,58,115,58,115,58,115,115,115,58,58,58,115,58,115,58,115,58,58,58,58,115,58,115,115,115,115,58,58,115,58,115,58,115,58,115,115,58,115,58,115,0,0,0,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,0,0,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0,0,0,0,0,0,0,125,116,125,116,116,125,116,0,125,116,0,125,0,0,125,116,125,116,125,116,0,0,116,125,125,116,125,116,0,0,108,103,103,108,103,108,103,108,103,103,103,108,103,103,108,103,108,103,108,103,103,103,108,103,108,108,103,103,108,103,108,103,108,103,108,108,103,0,108,103],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,-1],[[4,[2,3]]],[5,6,7]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[9,[8]]]],0,0,[-1,-1,[]],[1,10],[-1,-2,[],[]],[1,11],0,[1,[[13,[12]]]],0,[[11,8,14],15],[1,10],0,[1,10],0,0,[[[9,[1]]],[[4,[2,3]]]],[1,2],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,-1,[]],[-1,-2,[],[]],[[[18,[17]]],19],[19,[[4,[20,3]]]],[[19,[22,[21]]],[[4,[2,3]]]],[[19,23],[[4,[20,3]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],[[19,24,-1],[[4,[2,3]]],25],[[19,[22,[21]]],[[4,[2,3]]]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[],8],0,0,[-1,-1,[]],0,0,[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],0,[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[26,26],[[-1,-2],2,[],[]],0,0,0,0,[[26,27],28],[[26,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[29,30,26],[[4,[2,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],[[9,[29]]]],[29,31],0,[-1,-2,[],[]],[-1,32,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[34,35,[37,[36]]],[[4,[30,3]]]],[[[9,[34]],35,[37,[36]],-1],[[4,[2,3]]],[38,6]],0,[[34,35,[37,[36]]],[[4,[30,3]]]],0,[-1,-1,[]],[-1,-2,[],[]],0,0,0,[[11,10,[9,[39]],40,[9,[41]],14],[[9,[34]]]],[34,2],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[9,[42]],35,[37,[36]]],2],[[[9,[42]]],[[4,[2,3]]]],0,[-1,-1,[]],0,[-1,-2,[],[]],0,0,0,[[11,36,[9,[29]],[9,[8]],[9,[41]],14],[[9,[42]]]],0,0,0,[[42,43],[[37,[44]]]],0,0,[42,2],[[[9,[42]]],[[4,[2,3]]]],[[[9,[42]],35],[[4,[35,3]]]],[42,2],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[[42,36,43],2],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[45,35,[37,[36]],36],[[4,[[47,[46]],3]]]],0,[-1,-1,[]],[[[9,[45]],30],[[4,[2,3]]]],[[45,19,36],[[4,[[47,[46]],3]]]],0,[-1,-2,[],[]],0,0,0,[[11,36,[9,[[49,[48]]]],[9,[8]],[9,[41]],14],45],0,[[45,35,[37,[36]],[47,[46]]],[[4,[2,3]]]],[[45,[47,[46]],[47,[46]]],2],[[45,19,36],[[4,[50,3]]]],[[45,19,35],[[4,[2,3]]]],[[45,36,19],[[4,[2,3]]]],[[45,19],[[4,[2,3]]]],[[45,[51,[21]],19],[[4,[2,3]]]],[[45,19],[[4,[2,3]]]],[[45,35],2],[45,2],[[[9,[45]]],[[4,[2,3]]]],[[[9,[45]]],[[4,[2,3]]]],[[45,35,[37,[36]]],[[4,[2,3]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[52,53]]],54],[-1,[[4,[55,53]]],54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[52,52],[[-1,-2],2,[],[]],0,[[56,44],[[4,[2,3]]]],[-1,[[4,[52,53]]],57],[-1,[[4,[55,53]]],57],[[[9,[56]],[22,[58]]],2],[[52,-1],[[4,[2,59]]],60],[[55,-1],[[4,[2,59]]],60],0,[[52,27],28],[[55,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[[9,[56]],61,62],[[4,[2,3]]]],[[56,63],[[4,[2,3]]]],0,[[[9,[8]],[9,[[49,[48]]]],[9,[41]],14],56],[[[9,[56]],58],2],[[[9,[56]]],[[4,[2,3]]]],[[56,63],[[4,[2,3]]]],[[56,35],2],[56,2],[[[9,[56]]],[[4,[2,3]]]],0,0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[3,27],28],[[3,27],28],[-1,-1,[]],[[[64,[-1]]],3,[]],[65,3],[66,3],[67,3],[68,3],[69,3],[70,3],[71,3],[72,3],[73,3],[74,3],[75,3],[76,3],[-1,-2,[],[]],[3,[[37,[77]]]],[-1,32,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,33,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-1,[]],[-1,-2,[],[]],0,[[[9,[78]],[18,[79]],-1],2,[38,80,6]],[[78,35],[[4,[[18,[79]],3]]]],0,[[11,[9,[39]],40,[9,[41]],14],[[9,[78]]]],[78,2],[[[9,[78]],35,-1],[[4,[35,3]]],[38,80,6]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[20,53]]],54],[-1,[[4,[81,53]]],54],[-1,[[4,[24,53]]],54],[-1,[[4,[82,53]]],54],[-1,[[4,[83,53]]],54],[-1,[[4,[84,53]]],54],[-1,[[4,[85,53]]],54],[-1,[[4,[86,53]]],54],[-1,[[4,[87,53]]],54],[-1,[[4,[88,53]]],54],[-1,[[4,[46,53]]],54],[-1,[[4,[50,53]]],54],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[81,81],[24,24],[82,82],[83,83],[84,84],[85,85],[86,86],[46,46],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],0,[-1,[[4,[20,53]]],57],[-1,[[4,[81,53]]],57],[-1,[[4,[24,53]]],57],[-1,[[4,[82,53]]],57],[-1,[[4,[83,53]]],57],[-1,[[4,[84,53]]],57],[-1,[[4,[85,53]]],57],[-1,[[4,[86,53]]],57],[-1,[[4,[87,53]]],57],[-1,[[4,[88,53]]],57],[-1,[[4,[46,53]]],57],[-1,[[4,[50,53]]],57],0,[[20,-1],[[4,[2,59]]],60],[[81,-1],[[4,[2,59]]],60],[[24,-1],[[4,[2,59]]],60],[[82,-1],[[4,[2,59]]],60],[[83,-1],[[4,[2,59]]],60],[[84,-1],[[4,[2,59]]],60],[[85,-1],[[4,[2,59]]],60],[[86,-1],[[4,[2,59]]],60],[[87,-1],[[4,[2,59]]],60],[[88,-1],[[4,[2,59]]],60],[[46,-1],[[4,[2,59]]],60],[[50,-1],[[4,[2,59]]],60],[[46,46],40],[[-1,-2],40,[],[]],[[20,27],28],[[81,27],28],[[24,27],28],[[82,27],28],[[83,27],28],[[84,27],28],[[85,27],28],[[86,27],28],[[87,27],28],[[88,27],28],[[46,27],28],[[50,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[44,46],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[12,12],[89,89],[90,90],[91,91],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[12,27],28],[[12,27],28],[[89,27],28],[[89,27],28],[[90,27],28],[[90,27],28],[[91,27],28],[[91,27],28],[-1,-1,[]],[91,12],[90,12],[89,12],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],41],[[41,12],2],[41,[[13,[12]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,32,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,16,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[92,93,-1],2,25],0,[92,[[9,[8]]]],0,[92,26],[-1,-1,[]],[92,36],0,[-1,-2,[],[]],[92,40],[[[95,[94]],36,19,35,26,14],96],0,[92,[[9,[94]]]],0,0,0,0,0,[92,[[4,[2,3]]]],[92,[[98,[93,97]]]],[92,35],0,[[[9,[92]]],[[4,[2,3]]]],[[92,93,-1],[[4,[2,3]]],25],[92,2],[[[9,[92]]],2],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],0,[-1,-2,[],[]],[-1,[[4,[36,53]]],54],[-1,-2,[],[]],[36,36],[[-1,-2],2,[],[]],[-1,[[4,[36,53]]],57],[[36,-1],[[4,[2,59]]],60],[[36,36],40],[[-1,-2],40,[],[]],[[36,27],28],[[36,27],28],[-1,-1,[]],[[[51,[21]]],36],[[36,-1],2,99],[-1,-2,[],[]],[[[22,[21]]],36],[[],36],[-1,-2,[],[]],[-1,32,[]],[-1,[[4,[-2]]],[],[]],[100,[[4,[36]]]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,33,[]],[-1,-2,[],[]],0,0,0,0,0,[[94,[18,[101]]],[[4,[2,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[94,93,-1],2,25],0,0,[[94,36],40],[[94,19,26],[[4,[36,3]]]],0,[-1,-1,[]],0,[-1,-2,[],[]],[[[9,[94]]],2],0,[[36,[9,[29]],[9,[8]],[9,[41]],14],[[9,[94]]]],[[[9,[94]],30,26,[102,[[4,[2,3]]]]],[[4,[2,3]]]],0,[94,10],0,0,0,[[94,[104,[93,103]]],[[4,[2,3]]]],0,0,[[94,36],[[4,[2,3]]]],[[94,19,40],[[4,[2,3]]]],[[94,19],[[4,[2,3]]]],[94,[[4,[2,3]]]],[94,2],[[[9,[94]]],[[4,[2,3]]]],0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],[[94,19],[[4,[36,3]]]],[[94,19],[[4,[36,3]]]],0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[97,97],[[-1,-2],2,[],[]],[[97,27],28],[-1,-1,[]],[[],93],[[],105],[-1,-2,[],[]],0,0,[[[9,[-1]]],[[107,[[18,[106]]]]],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,33,[]],0,[[],[[4,[108,3]]]],[-1,-2,[],[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[109,53]]],54],[-1,-2,[],[]],[-1,-2,[],[]],[109,109],[[-1,-2],2,[],[]],[-1,[[4,[109,53]]],57],[[109,-1],[[4,[2,59]]],60],[[109,27],28],[-1,-1,[]],[-1,-1,[]],[[],93],[-1,-2,[],[]],[-1,-2,[],[]],[[96,14],110],0,0,[[[9,[111]],[112,[[51,[21]]]]],[[4,[2,3]]]],0,[[111,[98,[93,97]],[102,[[51,[21]]]]],[[4,[2,3]]]],[[[9,[111]]],[[107,[[18,[106]]]]]],0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[-1,33,[]],[[],[[4,[108,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[48,44],113],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[48,[51,[21]]],[[37,[10]]]],[[48,[51,[21]]],[[47,[10]]]],0,[[48,[51,[21]],10],[[47,[44]]]],[[48,[51,[21]]],40],0,[[113,27],28],[[48,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[48,[[0,[114]]]],0,[[[51,[21]]],48],[[48,43],[[37,[44]]]],[[48,[51,[21]]],2],[[61,61],40],[[48,10,44],40],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[[48,[51,[21]],43],2],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,[[115,44],2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,58],[115,115],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[115,[51,[21]]],40],0,0,0,[[58,27],28],[[115,27],28],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[58,40],[58,40],[58,40],[58,40],[115,[[0,[114]]]],0,[115,10],[[],115],[[115,10],[[0,[114]]]],[[115,[51,[21]]],2],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[[115,[51,[21]],43],2],[-1,33,[]],[-1,33,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,-2,[],[]],[-1,[[4,[44,53]]],54],[-1,-2,[],[]],[44,44],[[-1,-2],2,[],[]],[-1,[[4,[44,53]]],57],0,[[44,-1],[[4,[2,59]]],60],[[44,44],40],[[44,27],28],[-1,-1,[]],[46,44],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,33,[]],[-1,-2,[],[]],[[[51,[21]],[51,[21]]],[[51,[21]]]],0,[39,2],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[39,10],0,[10,39],[39,2],0,0,[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,-2,[],[]],[39,2],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[116,[[22,[117]]]],[-1,-1,[]],[-1,-1,[]],[11,[[4,[[2,[118,119]],3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[118,[[4,[120,65]]]],0,[[11,[37,[36]]],[[4,[121,3]]]],[11,[[4,[122,3]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],[118,[[4,[36,65]]]],[[120,[22,[21]],[22,[21]]],[[4,[2,65]]]],[[116,118,[22,[118]],123],[[4,[124,65]]]],[[125,118,[22,[118]],126,114,[22,[21]],123],[[4,[127,65]]]],[[125,[22,[21]],118,128],[[4,[129,65]]]],[[116,[22,[21]],118,128],[[4,[129,65]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[103,53]]],54],[-1,-2,[],[]],[-1,-2,[],[]],[108,108],[103,103],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[-1,[[4,[103,53]]],57],[[103,-1],[[4,[2,59]]],60],[[108,27],28],[[103,27],28],[[103,27],28],[-1,-1,[]],[-1,-1,[]],[105,[[4,[108,3]]]],[105,[[4,[103,3]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[103,130],108],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,32,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,16,[]],[-1,16,[]],0,[-1,33,[]],[-1,33,[]],[[130,103],40],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Backend",84],[15,"tuple"],[4,"Error",353],[4,"Result",1158],[8,"Fn",1159],[8,"Send",1160],[8,"Sync",1160],[3,"Config",129],[3,"Arc",1161],[15,"usize"],[4,"KeyPair",1162],[4,"MonitorEvent",654],[3,"Subscription",1163],[6,"GlobalExecutor",1164],[6,"ArcBackend",84],[3,"TypeId",1165],[8,"Connection",1166],[3,"Box",1167],[3,"Codec",112],[3,"NetMsg",427],[15,"u8"],[15,"slice"],[3,"Duration",1168],[4,"NetMsgCmd",427],[8,"CodecMsg",112],[4,"ConnDirection",160],[3,"Formatter",1169],[6,"Result",1169],[3,"ConnQueue",160],[6,"Conn",1166],[3,"NewConn",160],[3,"String",1170],[8,"Any",1165],[3,"Connector",204],[4,"Endpoint",1171],[3,"PeerID",789],[4,"Option",1172],[8,"FnOnce",1159],[3,"ConnectionSlots",1064],[15,"bool"],[3,"Monitor",654],[3,"Discovery",225],[15,"u16"],[3,"Entry",1038],[3,"LookupService",259],[3,"PeerMsg",427],[3,"Vec",1173],[3,"RoutingTable",926],[3,"Mutex",1174],[3,"PeersMsg",427],[15,"array"],[3,"PingMsg",294],[4,"DecodeError",1175],[8,"BorrowDecoder",1176],[3,"PongMsg",294],[3,"RefreshService",294],[8,"Decoder",1176],[3,"BucketEntry",984],[4,"EncodeError",1175],[8,"Encoder",1177],[4,"Addr",1171],[6,"Port",1171],[3,"UdpConn",1178],[3,"SendError",1179],[4,"Error",1180],[3,"Error",1181],[4,"RcgenError",1182],[3,"ParseIntError",1183],[4,"X509Error",1184],[4,"Error",1185],[4,"Error",1186],[3,"RecvError",1179],[3,"Error",1187],[3,"ParseFloatError",1188],[3,"ASN1Error",1189],[3,"InvalidDnsNameError",1190],[8,"Error",1191],[3,"Listener",408],[8,"ConnListener",1192],[8,"Clone",1193],[3,"NetMsgHeader",427],[3,"ProtocolMsg",427],[3,"VerMsg",427],[3,"VerAckMsg",427],[3,"ShutdownMsg",427],[3,"PingMsg",427],[3,"PongMsg",427],[3,"FindPeerMsg",427],[4,"ConnEvent",654],[4,"PeerPoolEvent",654],[4,"DiscoveryEvent",654],[3,"Peer",751],[6,"ProtocolID",857],[3,"PeerPool",815],[3,"Weak",1161],[6,"ArcPeer",751],[4,"ProtocolEvent",857],[3,"EventListener",1194],[8,"Hasher",1195],[4,"PublicKey",1162],[6,"ProtocolConstructor",857],[3,"Sender",1179],[3,"VersionInt",1116],[3,"HashMap",1196],[15,"str"],[8,"Future",1197],[3,"Pin",1198],[3,"Version",1116],[4,"PingProtocolMsg",887],[6,"ArcProtocol",857],[3,"PingProtocol",887],[3,"Receiver",1179],[4,"AddEntryResult",926],[8,"Iterator",1199],[3,"Bucket",984],[3,"CliCertVerifier",1081],[3,"DistinguishedName",1200],[3,"Certificate",1201],[3,"PrivateKey",1201],[3,"X509Certificate",1202],[3,"ClientConfig",1203],[3,"ServerConfig",1204],[3,"SystemTime",1205],[3,"ClientCertVerified",1206],[3,"SrvrCertVerifier",1081],[4,"ServerName",1203],[3,"ServerCertVerified",1206],[3,"DigitallySignedStruct",1206],[3,"HandshakeSignatureValid",1206],[3,"VersionReq",1207],[6,"ArcDiscovery",225],[6,"Result",353],[6,"ArcPeerPool",815],[6,"WeakPeerPool",815],[8,"Protocol",857]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
